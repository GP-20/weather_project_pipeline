{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "weather-project-adf"
		},
		"ls_weatherproject_dl_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_weatherproject_dl'"
		},
		"ls_http_ingest_data_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.open-meteo.com/v1/"
		},
		"ls_weatherproject_databricks_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0728-230811-b685wxb6"
		},
		"ls_weatherproject_dl_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://weatherprojectdl.dfs.core.windows.net/"
		},
		"tr_run_pipelines_properties_pl_run_pipelines_parameters_window_date": {
			"type": "string",
			"defaultValue": "@trigger().startTime"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ls_http_ingest_data')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('ls_http_ingest_data_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_weatherproject_databricks')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-5905928011115509.9.azuredatabricks.net",
					"authentication": "MSI",
					"workspaceResourceId": "/subscriptions/bc62cfec-7246-4100-888b-48f7d08a77d4/resourceGroups/weather_project_rg/providers/Microsoft.Databricks/workspaces/weather_project_ws",
					"existingClusterId": "[parameters('ls_weatherproject_databricks_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_weatherproject_dl')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_weatherproject_dl_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_weatherproject_dl_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ingest_new_data_databricks')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ingest new data",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/weather-project/ingest_data/ingest_daily_data",
							"baseParameters": {
								"p_file_date": {
									"value": "@formatDateTime(pipeline().parameters.p_file_date, 'yyyy-MM-dd')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_weatherproject_databricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"p_file_date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Ingest data"
				},
				"annotations": [],
				"lastPublishTime": "2023-07-31T02:28:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_weatherproject_databricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_query_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create graphs",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/weather-project/reports/weather_graphs"
						},
						"linkedServiceName": {
							"referenceName": "ls_weatherproject_databricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Query data"
				},
				"annotations": [],
				"lastPublishTime": "2023-07-31T22:59:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_weatherproject_databricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_transform_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "join data notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/weather-project/transform/join_data"
						},
						"linkedServiceName": {
							"referenceName": "ls_weatherproject_databricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Transfom data"
				},
				"annotations": [],
				"lastPublishTime": "2023-07-31T02:28:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_weatherproject_databricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_api_coordinates')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_weatherproject_dl",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "api_coordinates.json",
						"fileSystem": "coordinates"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"latitude": {
							"type": "string"
						},
						"longitude": {
							"type": "string"
						},
						"file_name": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_weatherproject_dl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_http_raw_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_weatherproject_dl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"window_date": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@formatDateTime(dataset().window_date,'yyyy-MM-dd')",
							"type": "Expression"
						},
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_weatherproject_dl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_http_request_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_http_ingest_data",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"latitude": {
						"type": "string"
					},
					"longitude": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@concat('forecast?latitude=',dataset().latitude,'&longitude=',dataset().longitude,'&hourly=temperature_2m,relativehumidity_2m,rain,snowfall,windspeed_10m&past_days=1&forecast_days=0&timezone=auto')",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_http_ingest_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_api_ingest_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup api coordinates file",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_api_coordinates",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Execute copy for each city",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup api coordinates file",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup api coordinates file').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy weather data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_http_request_data",
											"type": "DatasetReference",
											"parameters": {
												"latitude": {
													"value": "@item().latitude",
													"type": "Expression"
												},
												"longitude": {
													"value": "@item().longitude",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_http_raw_data",
											"type": "DatasetReference",
											"parameters": {
												"window_date": {
													"value": "@pipeline().parameters.window_date",
													"type": "Expression"
												},
												"file_name": {
													"value": "@item().file_name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"window_date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Ingest data"
				},
				"annotations": [],
				"lastPublishTime": "2023-07-31T02:28:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_api_coordinates')]",
				"[concat(variables('factoryId'), '/datasets/ds_http_request_data')]",
				"[concat(variables('factoryId'), '/datasets/ds_http_raw_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_run_pipelines')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute pl api ingest data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_api_ingest_data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"window_date": {
									"value": "@pipeline().parameters.window_date",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute ingest new data databricks",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute pl api ingest data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_ingest_new_data_databricks",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_file_date": {
									"value": "@pipeline().parameters.window_date",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute transform pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute ingest new data databricks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_transform_data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute query data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute transform pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_query_data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"window_date": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-31T22:59:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_api_ingest_data')]",
				"[concat(variables('factoryId'), '/pipelines/pl_ingest_new_data_databricks')]",
				"[concat(variables('factoryId'), '/pipelines/pl_transform_data')]",
				"[concat(variables('factoryId'), '/pipelines/pl_query_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_run_pipelines')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_run_pipelines",
							"type": "PipelineReference"
						},
						"parameters": {
							"window_date": "[parameters('tr_run_pipelines_properties_pl_run_pipelines_parameters_window_date')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 24,
						"startTime": "2023-07-29T08:00:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_run_pipelines')]"
			]
		}
	]
}